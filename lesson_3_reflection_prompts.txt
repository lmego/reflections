When would you want to create a remote repository rather than keeping all your work local?
   	This would be best in cases where we would like to work collaboratively with other developers
   	Also, it is useful to keep a copy of the code online to be able to access it from anywhere
   	Finally, it creates an external backup of the code which may come in handy if local files are
   	lost or become corrupted.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date 
with your remote repository?
	To retain control of the changes being made, while they are being made. Otherwise, code  added by 
	other remote users may affect the changes that a local user may be working on, therefore, rendering
	those changes useless.
		
Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Fork: Creates a copy of an existing public repository in GitHub to a users' own GIThub account. This
	allows the user to make and store changes and commits to his own remote copy of the repository. As he 
	most likely will not have the permissions to make changes on the original repository.
	
	Clone: Makes a copy of GIThub repository to a users local computer. It then links the local repository
	to the remote repository from which the information was clone, in order to be able to continue to pull
	and or push changes to/from the remote repository. It can also be used to create a local copy of the 
	entire repository
	
	Branch: Creates a snapshot in time of all the files in the repository and a secondary "path" on which
	changes can be made and committed in the existing repository. Any changes made in a secondary branch
	do not impact those made on the "master" branch. Therefore it is very useful to implement test or 
	experimental feature without affecting the main code.
	
What is the benefit of having a copy of the last known state of the remote stored locally?
	It allows us to do compare changes made to the local files against the last know state of the remote 
	while working offline.
	
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without Git or GitHub to collaborate, files would need to be sent over via email or shared through 
	network drives. Sharing would be simpler, but it would be nearly impossible to maintain a structured
	database that accurately kept track of all the changes made by different people on the different 
	documents. Also it would be much harder to merge the files when multiple people worked on them and to
	compare conflicts when merging them.
	
When would you want to make changes in a separate branch rather than directly in master? What benefits does 
each approach have?
	When the changes are big and experimental and may cause the code to stop working. By keeping these 
	experimental features in a different branch we can always ensure that we have a working copy of the
	code in our repository which is not affected by the new feature. Also, while small changes in the 
	code can be can be committed to the master branch directly (as it is easier), this still carries
	the risk of breaking down the production code.
	
Git Commands Learned:

git remote  |    Show all remote locations for the repository
git remote add origin url |     Add a new remote location for the repository. Origin is the default name to use when you create only one remote location. Url should be the https url to the github repository.
git remove -v  |    Outputs the remote locations with verbose information (fetch and push urls)
git push origin master  |    Push the master branch to the remote location origin.
git pull origin master  |    Get the master branch from the remote location origin.
git pull origin master  |    = Git fetch origin + git merge master origin/master
git fetch origin  |    Get the changes from the remote location into the (hidden?) origin/master branch